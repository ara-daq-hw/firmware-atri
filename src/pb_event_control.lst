PB3
---------- source file: pb_event_control.psm                                                       
           ;
           ; PicoBlaze Event Controller, v1
           ;
           
           ;
           ; Ports
           ;
           
           ; This is the block info buffer data.
       00  trigdata0         DSIN   0x00
       01  trigdata1         DSIN   0x01
       02  trigdata2         DSIN   0x02
       03  trigdata3         DSIN   0x03
       04  trigdata4         DSIN   0x04
       05  trigdata5         DSIN   0x05
       06  trigdata6         DSIN   0x06
       07  trigdata7         DSIN   0x07
       08  trigdata8         DSIN   0x08
       09  trigstat          DSIO   0x09
           ; Channel mask for the IRS readout.
       10  mask0             DSIO   0x10
       11  mask1             DSIO   0x11
       12  mask2             DSIO   0x12
       13  mask3             DSIO   0x13
           ; Indicates which IRSes are ready to accept a new block
       40  irsready          DSIN   0x40
           ; Begin IRS readout
       41  irsgo             DSOUT  0x41
           ; Indicates which IRSes are currently intended to be active
       42  active            DSIN   0x42
           ; This is the mask that should be checked for L4 triggers.
           ; This is just here to keep the code identical if the spare L4 triggers are added.
       43  l4maskin          DSIN   0x43
           ; Indicate event readout not ready/disable triggers.
       43  evrdready         DSOUT  0x43
           
           ; FIFOCNT is nominally number of bytes written,
           ; so you would normally have to subtract.
           ; Our FIFO is 128x1024 words deep: for fully-read out
           ; data, this is about 3 events deep.
           ; Nominally we want to subtract the fifo count
           ; from 0x20000. We actually just invert it: so the
           ; count you get is actually number of words remaining,
           ; minus 1. Close enough.
       50  fifocnt           DSIO   0x50
       51  fifocnt_high      DSIO   0x51
           
           ; Trigger info interface
       60  tinfocsr          DSIO   0x60
       64  tinfo0            DSIO   0x64
       65  tinfo1            DSIO   0x65
       66  tinfo2            DSIO   0x66
       67  tinfo3            DSIO   0x67
           
           ; DMA interface. DMA handles all 4 IRSes at the same time.
           ; You write the number of words (in 128-byte quantities - an additional header
           ; word is assumed), and it transfers them into the event FIFO.
           ; The first IRS will take a while (since the IRSes transfer slowly), and the
           ; remaining will readout very quickly. The individual IRS FIFOs are large enough
           ; to hold 2 full readouts (they're 1 BRAM each) so the next block can be
           ; read out while the first one is still emptying into the event FIFO.
           ; In truth it should take waaay less cycles to empty all of them than
           ; it will take to even convert the next block, so we may actually convert them
           ; to use 1 BRAM for 2 IRSes.
       24  dmacsr            DSIO   0x24
       20  dma0              DSIO   0x20
       21  dma1              DSIO   0x21
       22  dma2              DSIO   0x22
       23  dma3              DSIO   0x23
           
           ; Free interface. Strobe is generated on write to free_addr_h
       30  free_addr_l       DSOUT  0x30
       31  free_addr_h       DSOUT  0x31
           
           ; Parameters. Only readout delay is the current one.
       70  readout_delay     DSIN   0x70
           
           ; Output data to the 16-bit event FIFO.
       80  outdata           DSOUT  0x80
       81  outdata_high      DSOUT  0x81
       82  outdata_err       DSOUT  0x82
           
           ;
           ; Registers
           ; s0-s6 are general purpose.
     0F00  block_count       EQU    sF
     0E00  block_header      EQU    sE
     0D00  l4mask            EQU    sD
     0C00  event_error       EQU    sC
           ; This is the event ID. Reset to 0 when the digitizer subsystem is reset.
     0800  event_count_low   EQU    s8
     0900  event_count_high  EQU    s9
     0A00  block_size_low    EQU    sA
     0B00  block_size_high   EQU    sB
     0700  int0              EQU    s7
           ;
           ; Scratchpad RAM. We have 64 bytes. We need 9 bytes to grab the
           ; block info so we can convert continuously.
           ;
       00  trigcache0        EQU    0x00
       01  trigcache1        EQU    0x01
       02  trigcache2        EQU    0x02
       03  trigcache3        EQU    0x03
       04  trigcache4        EQU    0x04
       05  trigcache5        EQU    0x05
       06  trigcache6        EQU    0x06
       07  trigcache7        EQU    0x07
       08  trigcache8        EQU    0x08
       10  D1_count          EQU    0x10
       11  D2_count          EQU    0x11
       12  D3_count          EQU    0x12
       13  D4_count          EQU    0x13
       20  dmablock_l        EQU    0x20
       21  dmablock_h        EQU    0x21
           ;
           ; Constants
           ;
       01  TRIG_EMPTY        EQU    0x01
       02  TRIG_READ         EQU    0x02
       02  NEW_EVENT         EQU    0x02
           ; This is a cheat: roughly the size of an RF event, which is (num active IRSes)*64*8*20 = 0x2800 times number of active IRSes.
           ; We actually just want to wait for
           ; 4 IRS active: 0xFFFF (1111)
           ; 3 IRS active: 0xBFFF (1011)
           ; 2 IRS active: 0x7FFF (0111)
           ; 1 IRS active: 0x3FFF (0011)
           ; So we just subtract 1 from active, rotate right 2, and then OR with 0x3FFF.
       3F  MAX_EVSZ_BASE_MSB EQU    0x3F
       FF  MAX_EVSZ_BASE_LSB EQU    0xFF
           ; The PicoBlaze spits out an error frame if something happens it doesn't
           ; know how to handle (like, you enabled triggers before enabling the IRSes).
           ; After this point the digitizer subsystem needs to be reset.
       58  ERR_HEADER        EQU    'X'
       FF  ERR_FIRST_BLOCK_NOT_NEW_EVENT EQU    0xFF
       FE  ERR_NOT_ALL_DIGITIZERS_READY EQU    0xFE
       FD  ERR_WTF           EQU    0xFD
           ; Number of words in a trigger info (2)
       02  TRIGINFO_COUNT    EQU    2
           ; Size of the event header (1 word version, 1 word PPS, 2 words cycle, 1 word ID)
       05  EVENT_HEADER_SIZE EQU    5
           ; Minimum size of the block header.
           ; 1 word frame
           ; 1 word length
           ; 1 word l4/l4new
           ; 1 word blkidpat
       04  BLOCK_HEADER_MIN  EQU    4
           ; Number of that minimum that's framing. (1 byte for frame start, 1 for length)
       02  BLOCK_HEADER_FRAMING EQU    2
           ; Number of words per channel (64)
       40  CHANNEL_SIZE      EQU    64
           
           ; New block
       45  EVHEADER_NEW      EQU    'E'
           ; Last block
       46  EVHEADER_LAST     EQU    'F'
           ; Middle block
       42  EVHEADER_MID      EQU    'B'
           ; Only block
       4F  EVHEADER_ONLY     EQU    'O'
           
           ; Error codes. Only EVERROR_CODE_1 is used now, when the event FIFO is full.
           ; Might suck all of these into a count of the number of cycles waiting.
       00  EVERROR_CODE_0    EQU    0x00                    ; No error.
       20  EVERROR_CODE_1    EQU    0x20                    ; FIFO full.
       40  EVERROR_CODE_2    EQU    0x40
       60  EVERROR_CODE_3    EQU    0x60
       80  EVERROR_CODE_4    EQU    0x80
       A0  EVERROR_CODE_5    EQU    0xA0
       C0  EVERROR_CODE_6    EQU    0xC0
       E0  EVERROR_CODE_7    EQU    0xE0
           ; Event format version. This is version 2.
       02  EVHEADER_VER      EQU    2
000        main            :
           ; initialize stuff I guess
000 00E00                    LOAD   block_header, 0x00
001 00A00                    LOAD   block_size_low, 0x00
002 00B00                    LOAD   block_size_high, 0x00
003 00800                    LOAD   event_count_low, 0x00
004 00900                    LOAD   event_count_high, 0x00
005 00C00                    LOAD   event_error, EVERROR_CODE_0
006 2CC43                    OUT    event_error, evrdready
007 04D43                    IN     l4mask, l4maskin
008        poll            :
008 14C20                    COMP   event_error, EVERROR_CODE_1
009 35014                    JUMP   Z, check_fifo_space
00A 04009                    IN     s0, trigstat
00B 12001                    TEST   s0, TRIG_EMPTY
00C 35408                    JUMP   NZ, poll
00D 04001                    IN     s0, trigdata1
00E 12002                    TEST   s0, NEW_EVENT
00F 35012                    JUMP   Z, main_err_new_event
010 30026                    CALL   handle_new_event
           ; If we're back here, it means that we've fully pushed the
           ; new event out, and there is no new event waiting. So we can
           ; go back to polling.
011 34008                    JUMP   poll
012        main_err_new_event:
           ; Something has gone wrong - we need to push out an error frame
           ; to let software know to reset everything.
012 000FF                    LOAD   s0, ERR_FIRST_BLOCK_NOT_NEW_EVENT
013 340F1                    JUMP   error_frame
014        check_fifo_space:
014 04042                    IN     s0, active              ; Get active IRSes
015 300DF                    CALL   popcount
016 01010                    LOAD   s0, s1
017 1C001                    SUB    s0, 1
018 2000C                    RR     s0
019 2000C                    RR     s0
01A 0C03F                    OR     s0, MAX_EVSZ_BASE_MSB
01B 001FF                    LOAD   s1, MAX_EVSZ_BASE_LSB
01C 04251                    IN     s2, fifocnt_high
01D 04350                    IN     s3, fifocnt
01E 1D310                    SUB    s3, s1
01F 1F200                    SUBC   s2, s0
020 35023                    JUMP   Z, clear_error_code
021 35823                    JUMP   C, clear_error_code
022 34008                    JUMP   poll
023        clear_error_code:
023 00C00                    LOAD   event_error, EVERROR_CODE_0
024 2CC43                    OUT    event_error, evrdready
025 34008                    JUMP   poll
           
           ; DONE MAIN LOOP
           
026        handle_new_event:
           ; Set the new event flag.
026 00E45                    LOAD   block_header, EVHEADER_NEW
027 00F00                    LOAD   block_count, 0x00
028        handle_new_event_do_block:
028 300C3                    CALL   start_new_block
           ; Now we have to calculate the block size. Start with the IRS count.
029        hne_irscount    :
029 04242                    IN     s2, active              ; +1
02A 00310                    LOAD   s3, mask0               ; +1
02B 00400                    LOAD   s4, 0x00
02C        hne_irscount_lp0:
02C 2020E                    SR0    s2                      ; +4
02D 35C34                    JUMP   NC, hne_irscount_lp1    ; +4 - skip if bit is not set.
02E 18401                    ADD    s4, 1                   ; +4
02F 05030                    IN     s0, s3                  ; +4
030 0E0FF                    XOR    s0, 0xFF                ; +4
031 300DF                    CALL   popcount                ; +72
032 2F130                    STORE  s1, s3                  ; +4 sleaze! we store the popcounts in scr_mask0/mask3, same address
033 19B10                    ADD    block_size_high, s1     ; +4
034        hne_irscount_lp1:
034 18301                    ADD    s3, 1                   ; +4
035 14314                    COMP   s3, mask3 + 1           ; +4
036 3542C                    JUMP   NZ, hne_irscount_lp0    ; +4
037 20B0E                    SR0    block_size_high         ; +1 we now have NCH*256 words. We want NCH*64, so divide by 4.
038 20A08                    SRA    block_size_low          ; +1
039 20B0E                    SR0    block_size_high         ; +1 
03A 20A08                    SRA    block_size_low          ; +1 sleaze! at 110 instr. here (2.2 us)
03B 19A40                    ADD    block_size_low, s4      ; add the block headers
03C 1AA00                    ADDC   block_size_low, 0x00
03D 06002                    FETCH  s0, trigcache2          ; +1
03E 300DF                    CALL   popcount                ; +18 
03F 20106                    SL0    s1                      ; +1: TRIGINFO_COUNT is 2
040 19A10                    ADD    block_size_low, s1      ; +1
041 1AB00                    ADDC   block_size_high, 0x00   ; +1
           ; at 132 instr. here (2.64 us)
           ; Add the MINIMUM block header
042 18A04                    ADD    block_size_low, BLOCK_HEADER_MIN ; +1
043 18B00                    ADD    block_size_high, 0x00   ; +1
           ; Now we need to determine if this is the first block, middle, last, or only
044 04009                    IN     s0, trigstat            ; +1
045 12001                    TEST   s0, TRIG_EMPTY          ; +1
           ; If it's empty, this is the last block, so our header is different
046 35457                    JUMP   NZ, handle_last_block_count ; +1
           ; If it's not empty, we need to check to see if it's a new event pending
047 04001                    IN     s0, trigdata1           ; +1
048 12002                    TEST   s0, NEW_EVENT
           ; It is a new event, so this is the last block
049 35457                    JUMP   NZ, handle_last_block_count ; +1
           ; Is this the first block?
04A 14E45                    COMP   block_header, EVHEADER_NEW ; +1
04B 3505D                    JUMP   Z, handle_first_block_count ; +1
           ; Our event size is now correct. So we wait for space.                          ; at 147 instr. here (2.94 us)
04C        wait_for_space  :
04C 04024                    IN     s0, dmacsr
04D 12001                    TEST   s0, 0x01                ; is DMA still busy?
04E 3544C                    JUMP   NZ, wait_for_space      ; yes: wait
04F 04050                    IN     s0, fifocnt
050 04151                    IN     s1, fifocnt_high
051 1D0A0                    SUB    s0, block_size_low
052 1F1B0                    SUBC   s1, block_size_high
053 35C62                    JUMP   NC, fill_data           ; Enough space available.
           ; Do something here, since we're waiting! If we wait too long bad things happen
054 00C20                    LOAD   event_error, EVERROR_CODE_1 ; Error code 1, folks. Too long!
           ; We should probably kill incoming triggers...
055 2CC43                    OUT    event_error, evrdready
056 3404C                    JUMP   wait_for_space          ; And keep waiting.
           
057        handle_last_block_count:
057 14E45                    COMP   block_header, EVHEADER_NEW ; Is this also the first block?
058 3505B                    JUMP   Z, handle_last_block_count_jp0 ; Yes: so we need to switch to ONLY
059 00E46                    LOAD   block_header, EVHEADER_LAST ; No, so we just switch the block header and continue
05A 3404C                    JUMP   wait_for_space
05B        handle_last_block_count_jp0:
05B 00E4F                    LOAD   block_header, EVHEADER_ONLY ; Switch to only...
05C 3405D                    JUMP   handle_first_block_count ; and add the initial header
05D        handle_first_block_count:
05D 18A05                    ADD    block_size_low, EVENT_HEADER_SIZE
05E 1AB00                    ADDC   block_size_high, 0x00
05F 3404C                    JUMP   wait_for_space
060        handle_new_event_err_active:
060 000FE                    LOAD   s0, ERR_NOT_ALL_DIGITIZERS_READY
061 300F1                    CALL   error_frame
           
062        fill_data       :                                ; Now we can actually fill data! (at 152 instr. here)
062 010F0                    LOAD   s0, block_count         ; Start with framing. Only 1 frame/block.
063 2C080                    OUT    s0, outdata             ; output it
064 2CE81                    OUT    block_header, outdata_high ; output frame type
065 1CA02                    SUB    block_size_low, BLOCK_HEADER_FRAMING
066 1EB00                    SUBC   block_size_high, 0x00
067 2CA80                    OUT    block_size_low, outdata
068 2CB81                    OUT    block_size_high, outdata_high ; output length
069 14E42                    COMP   block_header, EVHEADER_MID ; Skip the event header unless we're EVHEADER_FIRST
06A 35080                    JUMP   Z, fill_block_header    ; or EVHEADER_ONLY
06B 14E46                    COMP   block_header, EVHEADER_LAST
06C 35080                    JUMP   Z, fill_block_header
06D 00102                    LOAD   s1, EVHEADER_VER
06E 2C180                    OUT    s1, outdata             ; version, low (2)
06F 2C081                    OUT    s0, outdata_high        ; version, high (0)
070 06103                    FETCH  s1, trigcache3
071 2C180                    OUT    s1, outdata             ; PPS[15:8]
072 06104                    FETCH  s1, trigcache4
073 2C181                    OUT    s1, outdata_high        ; PPS[7:0]
074 06107                    FETCH  s1, trigcache7
075 2C180                    OUT    s1, outdata             ; CYCLE[23:16]
076 06108                    FETCH  s1, trigcache8
077 2C181                    OUT    s1, outdata_high        ; CYCLE[31:24]
078 06105                    FETCH  s1, trigcache5
079 2C180                    OUT    s1, outdata             ; CYCLE[7:0]
07A 06106                    FETCH  s1, trigcache6
07B 2C181                    OUT    s1, outdata_high        ; CYCLE[15:8]
07C 2C880                    OUT    event_count_low, outdata
07D 2C981                    OUT    event_count_high, outdata_high
07E 18801                    ADD    event_count_low, 1      ; Increment event counter.
07F 1A800                    ADDC   event_count_low, 0
080        fill_block_header:                               ; At 182 instr. here (3.64 us: halfway!)
080 06101                    FETCH  s1, trigcache1
081 2010E                    SR0    s1
082 2010E                    SR0    s1
083 2C180                    OUT    s1, outdata             ; TRIG_L4[7:0]
084 06102                    FETCH  s1, trigcache2
085 2C181                    OUT    s1, outdata_high        ; TRIG_L4_NEW[7:0]
086 0B1D0                    AND    s1, l4mask
087 002FF                    LOAD   s2, 0xFF
088        fill_trigger_headers:                            ; at 190 instr. here
088 18201                    ADD    s2, 1
089 2010E                    SR0    s1
08A 35C94                    JUMP   NC, fill_trigger_headers_end
08B 2C260                    OUT    s2, tinfocsr
08C 04366                    IN     s3, tinfo2
08D 2C380                    OUT    s3, outdata
08E 04367                    IN     s3, tinfo3
08F 2C381                    OUT    s3, outdata_high
090 04364                    IN     s3, tinfo0
091 2C380                    OUT    s3, outdata
092 04365                    IN     s3, tinfo1
093 2C381                    OUT    s3, outdata_high
094        fill_trigger_headers_end:
094 35488                    JUMP   NZ, fill_trigger_headers ; all we did is in/out: Z hasn't changed
           ; 13*6 = 78 max, 268 instr (5.36 us, but almost done!)
095 06100                    FETCH  s1, trigcache0          ; 
096 2C180                    OUT    s1, outdata             ; block ID
097 06101                    FETCH  s1, trigcache1          ;
098 0A101                    AND    s1, 0x01                ; only low bit
099 04242                    IN     s2, active
09A 20206                    SL0    s2                      ; Shift it up by 1...
09B 0D120                    OR     s1, s2                  ; and OR it with the high block bit
09C 0D1C0                    OR     s1, event_error         ; now OR it with the event error bits
09D 2C181                    OUT    s1, outdata_high        ; block id and active IRS pattern
           ; and we're done, at 279 instr. Have 80 remaining
           ; before the IRS is even done converting!
09E        fill_D1         :
09E 12202                    TEST   s2, 0x02                ; is D1 involved in this?
09F 350A2                    JUMP   Z, fill_D2
0A0 06010                    FETCH  s0, D1_count
0A1 2C020                    OUT    s0, dma0
0A2        fill_D2         :
0A2 12204                    TEST   s2, 0x04
0A3 350A6                    JUMP   Z, fill_D3
0A4 06011                    FETCH  s0, D2_count
0A5 2C021                    OUT    s0, dma1
0A6        fill_D3         :
0A6 12208                    TEST   s2, 0x08
0A7 350AA                    JUMP   Z, fill_D4
0A8 06012                    FETCH  s0, D3_count
0A9 2C022                    OUT    s0, dma2
0AA        fill_D4         :
0AA 12210                    TEST   s2, 0x10
0AB 350AE                    JUMP   Z, finish
0AC 06013                    FETCH  s0, D4_count
0AD 2C023                    OUT    s0, dma3
           
0AE 06000  finish          : FETCH  s0, trigcache0          ; Get the block # for when DMA completes
0AF 2E020                    STORE  s0, dmablock_l
0B0 06001                    FETCH  s0, trigcache1
0B1 0A001                    AND    s0, 0x01                ; only the low bit (9 bit blocks)
0B2 2E021                    STORE  s0, dmablock_h
0B3 3C001                    EINT                           ; and enable interrupts.
0B4 00001                    LOAD   s0, 0x01
0B5 2C024                    OUT    s0, dmacsr              ; Tell DMA to begin. When it finishes, we free the block.
0B6 00A00                    LOAD   block_size_low, 0x00    ; Zero the block size.
0B7 00B00                    LOAD   block_size_high, 0x00   ; Zero the block size.
           ; Wait until the IRSes finish reading out. DMA won't be complete yet.
0B8        wait_irs_done   :
0B8 04042                    IN     s0, active
0B9 04140                    IN     s1, irsready
0BA 15010                    COMP   s0, s1
0BB 354B8                    JUMP   NZ, wait_irs_done
0BC 14E46                    COMP   block_header, EVHEADER_LAST
0BD 2B000                    RET    Z
0BE 14E4F                    COMP   block_header, EVHEADER_ONLY
0BF 2B000                    RET    Z
0C0 18F01                    ADD    block_count, 1
0C1 00E42                    LOAD   block_header, EVHEADER_MID
0C2 34028                    JUMP   handle_new_event_do_block ; FIXME: THIS is where the block should be freed, not after DMA.
           ; It's not much difference (~20 m
           
0C3        start_new_block :
           ; If we're here, the IRSes should always be ready.
           ; If they're not, we spit out an error frame and tell the software to
           ; stop screwing around.
           ;
           ; We check against our active daughter mask, first.
0C3 04040                    IN     s0, irsready
0C4 04142                    IN     s1, active
0C5 0F010                    XOR    s0, s1
0C6 35460                    JUMP   NZ, handle_new_event_err_active
0C7 14E45                    COMP   block_header, EVHEADER_NEW
0C8 310FF                    CALL   Z, delay_new_event
           ; Here would be where we handle channel masking on a block by block basis:
           ; the easy way would be -
           ; in s0, trigdata1
           ; test s0, $F4
           ; call Z, mask_surface_triggers
           ; Now we tell them to go
0C9 2C141                    OUT    s1, irsgo
           ; Now cache the block data.
0CA 04000                    IN     s0, trigdata0
0CB 2E000                    STORE  s0, trigcache0
0CC 04001                    IN     s0, trigdata1
0CD 2E001                    STORE  s0, trigcache1
0CE 04002                    IN     s0, trigdata2
0CF 2E002                    STORE  s0, trigcache2
0D0 04003                    IN     s0, trigdata3
0D1 2E003                    STORE  s0, trigcache3
0D2 04004                    IN     s0, trigdata4
0D3 2E004                    STORE  s0, trigcache4
0D4 04005                    IN     s0, trigdata5
0D5 2E005                    STORE  s0, trigcache5
0D6 04006                    IN     s0, trigdata6
0D7 2E006                    STORE  s0, trigcache6
0D8 04007                    IN     s0, trigdata7
0D9 2E007                    STORE  s0, trigcache7
0DA 04008                    IN     s0, trigdata8
0DB 2E008                    STORE  s0, trigcache8
0DC 00002                    LOAD   s0, TRIG_READ
0DD 2C009                    OUT    s0, trigstat
           ; Now we can deal with figuring out what to do next
0DE 2A000                    RET   
           
0DF        popcount        :
0DF 00100                    LOAD   s1, 0x00
0E0 2000E                    SR0    s0                      ; 1
0E1 1A100                    ADDC   s1, 0                   ; .
0E2 2000E                    SR0    s0                      ; 2
0E3 1A100                    ADDC   s1, 0                   ; .
0E4 2000E                    SR0    s0                      ; 3
0E5 1A100                    ADDC   s1, 0                   ; .
0E6 2000E                    SR0    s0                      ; 4
0E7 1A100                    ADDC   s1, 0                   ; .
0E8 2000E                    SR0    s0                      ; 5
0E9 1A100                    ADDC   s1, 0                   ; .
0EA 2000E                    SR0    s0                      ; 6
0EB 1A100                    ADDC   s1, 0                   ; .
0EC 2000E                    SR0    s0                      ; 7
0ED 1A100                    ADDC   s1, 0                   ; .
0EE 2000E                    SR0    s0                      ; 8
0EF 1A100                    ADDC   s1, 0                   ; done
0F0 2A000                    RET   
           
0F1        error_frame     :
0F1 04150                    IN     s1, fifocnt
0F2 14103                    COMP   s1, 0x03
0F3 358F1                    JUMP   C, error_frame
0F4 00158                    LOAD   s1, ERR_HEADER
0F5 2C180                    OUT    s1, outdata
0F6 00100                    LOAD   s1, 0
0F7 2C181                    OUT    s1, outdata_high
0F8 00101                    LOAD   s1, 1
0F9 2C180                    OUT    s1, outdata
0FA 00100                    LOAD   s1, 0
0FB 2C181                    OUT    s1, outdata_high
0FC 2C082                    OUT    s0, outdata_err
0FD 2C181                    OUT    s1, outdata_high
0FE 340FE  err_halt        : JUMP   err_halt                ; Will need a reset now!
           
0FF        delay_new_event :                                ; s0 is available here
0FF 04070                    IN     s0, readout_delay
100        delay_new_event_lp0:
100 1C001                    SUB    s0, 1
101 35500                    JUMP   NZ, delay_new_event_lp0
102 2A000                    RET   
           
103 06720  isr             : FETCH  int0, dmablock_l
104 2C730                    OUT    int0, free_addr_l
105 06721                    FETCH  int0, dmablock_h
106 2C731                    OUT    int0, free_addr_h
107 38000                    RETI   disable                 ; return, no interrupts
3FD                          ORG    0x3FD
3FD 000FD                    LOAD   s0, ERR_WTF
3FE 340F1                    JUMP   error_frame
3FF                          ORG    0x3FF
3FF 34103  isr_vec         : JUMP   isr
