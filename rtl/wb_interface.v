// Automatically generated by interface_generator.pl
// Interface name: wb
// Interface definition: ../rtl/wb_interface.def
// Generation date/time: Fri Mar 9, 2012 13:52:41

/*
 * WISHBONE master-to-slave interface.
 * A syscon module is required to inject the clk and rst into the interface.
 * 
 * Minimally, you would have:
 * 
 * wire [`WBIF_SIZE-1:0] interface;
 * wire clk;
 * wire rst;
 * some_wishbone_master u_master(.interface_io(interface));
 * wb_syscon syscon(.interface_io(interface),.clk_i(clk), .rst_i(rst));
 * some_wishbone_slave u_slave(.interface_io(interface));
 * 
*/

`include "wb_interface.vh"
// BEGIN wb wb_slave DATE Fri Mar 9, 2012 13:52:41
// 
// wire clk_i;
// wire rst_i;
// wire cyc_i;
// wire wr_i;
// wire stb_i;
// wire ack_o;
// wire err_o;
// wire rty_o;
// wire [15:0] adr_i;
// wire [7:0] dat_i;
// wire [7:0] dat_o;
// wb_slave wbif(.interface_io(interface_io),
//               .clk_o(clk_i),
//               .rst_o(rst_i),
//               .cyc_o(cyc_i),
//               .wr_o(wr_i),
//               .stb_o(stb_i),
//               .ack_i(ack_o),
//               .err_i(err_o),
//               .rty_i(rty_o),
//               .adr_o(adr_i),
//               .dat_o(dat_i),
//               .dat_i(dat_o));
//
// END wb wb_slave DATE Fri Mar 9, 2012 13:52:41

module wb_slave(
		inout [`WBIF_SIZE-1:0] interface_io,
		output  clk_o,
		output  rst_o,
		output  cyc_o,
		output  wr_o,
		output  stb_o,
		input  ack_i,
		input  err_i,
		input  rty_i,
		output  [15:0]  adr_o,
		output  [7:0]  dat_o,
		input  [7:0]  dat_i
		);

	assign clk_o = interface_io[0];
	assign rst_o = interface_io[1];
	assign cyc_o = interface_io[2];
	assign wr_o = interface_io[3];
	assign stb_o = interface_io[4];
	assign interface_io[5] = ack_i;
	assign interface_io[6] = err_i;
	assign interface_io[7] = rty_i;
	assign adr_o = interface_io[23:8];
	assign dat_o = interface_io[31:24];
	assign interface_io[39:32] = dat_i;

endmodule


//% Reassigns a wb interface from a wb_slave on A_i
module wb_slave_reassign( A_i, B_o );
	inout [`WBIF_SIZE-1:0] A_i;
	inout [`WBIF_SIZE-1:0] B_o;

	assign A_i[0] = B_o[0];
	assign A_i[1] = B_o[1];
	assign A_i[2] = B_o[2];
	assign A_i[3] = B_o[3];
	assign A_i[4] = B_o[4];
	assign B_o[5] = A_i[5];
	assign B_o[6] = A_i[6];
	assign B_o[7] = A_i[7];
	assign A_i[23:8] = B_o[23:8];
	assign A_i[31:24] = B_o[31:24];
	assign B_o[39:32] = A_i[39:32];
endmodule

// BEGIN wb wb_master DATE Fri Mar 9, 2012 13:52:41
// 
// wire clk_i;
// wire rst_i;
// wire cyc_o;
// wire wr_o;
// wire stb_o;
// wire ack_i;
// wire err_i;
// wire rty_i;
// wire [15:0] adr_o;
// wire [7:0] dat_o;
// wire [7:0] dat_i;
// wb_master wbif(.interface_io(interface_io),
//                .clk_o(clk_i),
//                .rst_o(rst_i),
//                .cyc_i(cyc_o),
//                .wr_i(wr_o),
//                .stb_i(stb_o),
//                .ack_o(ack_i),
//                .err_o(err_i),
//                .rty_o(rty_i),
//                .adr_i(adr_o),
//                .dat_i(dat_o),
//                .dat_o(dat_i));
//
// END wb wb_master DATE Fri Mar 9, 2012 13:52:41

module wb_master(
		inout [`WBIF_SIZE-1:0] interface_io,
		output  clk_o,
		output  rst_o,
		input  cyc_i,
		input  wr_i,
		input  stb_i,
		output  ack_o,
		output  err_o,
		output  rty_o,
		input  [15:0]  adr_i,
		input  [7:0]  dat_i,
		output  [7:0]  dat_o
		);

	assign clk_o = interface_io[0];
	assign rst_o = interface_io[1];
	assign interface_io[2] = cyc_i;
	assign interface_io[3] = wr_i;
	assign interface_io[4] = stb_i;
	assign ack_o = interface_io[5];
	assign err_o = interface_io[6];
	assign rty_o = interface_io[7];
	assign interface_io[23:8] = adr_i;
	assign interface_io[31:24] = dat_i;
	assign dat_o = interface_io[39:32];

endmodule


//% Reassigns a wb interface from a wb_master on A_i
module wb_master_reassign( A_i, B_o );
	inout [`WBIF_SIZE-1:0] A_i;
	inout [`WBIF_SIZE-1:0] B_o;

	assign A_i[0] = B_o[0];
	assign A_i[1] = B_o[1];
	assign B_o[2] = A_i[2];
	assign B_o[3] = A_i[3];
	assign B_o[4] = A_i[4];
	assign A_i[5] = B_o[5];
	assign A_i[6] = B_o[6];
	assign A_i[7] = B_o[7];
	assign B_o[23:8] = A_i[23:8];
	assign B_o[31:24] = A_i[31:24];
	assign A_i[39:32] = B_o[39:32];
endmodule

// BEGIN wb wb_syscon DATE Fri Mar 9, 2012 13:52:41
// 
// wire clk_o;
// wire rst_o;
// wb_syscon wbif(.interface_io(interface_io),
//                .clk_i(clk_o),
//                .rst_i(rst_o));
//
// END wb wb_syscon DATE Fri Mar 9, 2012 13:52:41

module wb_syscon(
		inout [`WBIF_SIZE-1:0] interface_io,
		input  clk_i,
		input  rst_i
		);

	assign interface_io[0] = clk_i;
	assign interface_io[1] = rst_i;

endmodule


// BEGIN wb wb_debug DATE Fri Mar 9, 2012 13:52:41
// 
// wire clk_i;
// wire rst_i;
// wire cyc_i;
// wire wr_i;
// wire stb_i;
// wire ack_i;
// wire err_i;
// wire rty_i;
// wire [15:0] adr_i;
// wire [7:0] dat_master_i;
// wire [7:0] dat_slave_i;
// wb_debug wbif(.interface_io(interface_io),
//               .clk_o(clk_i),
//               .rst_o(rst_i),
//               .cyc_o(cyc_i),
//               .wr_o(wr_i),
//               .stb_o(stb_i),
//               .ack_o(ack_i),
//               .err_o(err_i),
//               .rty_o(rty_i),
//               .adr_o(adr_i),
//               .dat_master_o(dat_master_i),
//               .dat_slave_o(dat_slave_i));
//
// END wb wb_debug DATE Fri Mar 9, 2012 13:52:41

module wb_debug(
		inout [`WBIF_SIZE-1:0] interface_io,
		output  clk_o,
		output  rst_o,
		output  cyc_o,
		output  wr_o,
		output  stb_o,
		output  ack_o,
		output  err_o,
		output  rty_o,
		output  [15:0]  adr_o,
		output  [7:0]  dat_master_o,
		output  [7:0]  dat_slave_o
		);

	assign clk_o = interface_io[0];
	assign rst_o = interface_io[1];
	assign cyc_o = interface_io[2];
	assign wr_o = interface_io[3];
	assign stb_o = interface_io[4];
	assign ack_o = interface_io[5];
	assign err_o = interface_io[6];
	assign rty_o = interface_io[7];
	assign adr_o = interface_io[23:8];
	assign dat_master_o = interface_io[31:24];
	assign dat_slave_o = interface_io[39:32];

endmodule


