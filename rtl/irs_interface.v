// Automatically generated by interface_generator.pl
// Interface name: irs
// Interface definition: irs_interface.def
// Generation date/time: Mon Aug 20, 2012 22:27:39

/*
 * IRS interface.
 * 
 * This encapsulates the entire connection from an FPGA to
 * an IRS. The signal naming is the "IRS2" naming convention.
 * It also contains a power and drive pair.
 * "power" is asserted when power to the IRS is on.
 * "drive" is asserted when signals to the IRS are being
 * driven.
 * 
*/

`include "irs_interface.vh"
// BEGIN irs irs_ctrl DATE Mon Aug 20, 2012 22:27:39
// 
// wire [11:0] dat_i;
// wire [5:0] smp_o;
// wire [2:0] ch_o;
// wire smpall_o;
// wire ramp_o;
// wire start_o;
// wire clr_o;
// wire [9:0] wr_o;
// wire wrstrb_o;
// wire [9:0] rd_i;
// wire [9:0] rdo_o;
// wire [9:0] rdoe_o;
// wire rden_o;
// wire tsa_o;
// wire tsa_close_o;
// wire tsaout_i;
// wire tstout_i;
// wire power_i;
// wire drive_i;
// irs_ctrl irsif(.interface_io(interface_io),
//                .dat_o(dat_i),
//                .smp_i(smp_o),
//                .ch_i(ch_o),
//                .smpall_i(smpall_o),
//                .ramp_i(ramp_o),
//                .start_i(start_o),
//                .clr_i(clr_o),
//                .wr_i(wr_o),
//                .wrstrb_i(wrstrb_o),
//                .rd_o(rd_i),
//                .rdo_i(rdo_o),
//                .rdoe_i(rdoe_o),
//                .rden_i(rden_o),
//                .tsa_i(tsa_o),
//                .tsa_close_i(tsa_close_o),
//                .tsaout_o(tsaout_i),
//                .tstout_o(tstout_i),
//                .power_o(power_i),
//                .drive_o(drive_i));
//
// END irs irs_ctrl DATE Mon Aug 20, 2012 22:27:39

module irs_ctrl(
		inout [`IRSIF_SIZE-1:0] interface_io,
		output  [11:0]  dat_o,
		input  [5:0]  smp_i,
		input  [2:0]  ch_i,
		input  smpall_i,
		input  ramp_i,
		input  start_i,
		input  clr_i,
		input  [9:0]  wr_i,
		input  wrstrb_i,
		output  [9:0]  rd_o,
		input  [9:0]  rdo_i,
		input  [9:0]  rdoe_i,
		input  rden_i,
		input  tsa_i,
		input  tsa_close_i,
		output  tsaout_o,
		output  tstout_o,
		output  power_o,
		output  drive_o
		);

	assign dat_o = interface_io[11:0];
	assign interface_io[17:12] = smp_i;
	assign interface_io[20:18] = ch_i;
	assign interface_io[21] = smpall_i;
	assign interface_io[22] = ramp_i;
	assign interface_io[23] = start_i;
	assign interface_io[24] = clr_i;
	assign interface_io[34:25] = wr_i;
	assign interface_io[35] = wrstrb_i;
	assign rd_o = interface_io[45:36];
	assign interface_io[55:46] = rdo_i;
	assign interface_io[65:56] = rdoe_i;
	assign interface_io[66] = rden_i;
	assign interface_io[67] = tsa_i;
	assign interface_io[68] = tsa_close_i;
	assign tsaout_o = interface_io[69];
	assign tstout_o = interface_io[70];
	assign power_o = interface_io[71];
	assign drive_o = interface_io[72];

endmodule


//% Reassigns a irs interface from a irs_ctrl on A_i
module irs_ctrl_reassign( A_i, B_o );
	inout [`IRSIF_SIZE-1:0] A_i;
	inout [`IRSIF_SIZE-1:0] B_o;

	assign A_i[11:0] = B_o[11:0];
	assign B_o[17:12] = A_i[17:12];
	assign B_o[20:18] = A_i[20:18];
	assign B_o[21] = A_i[21];
	assign B_o[22] = A_i[22];
	assign B_o[23] = A_i[23];
	assign B_o[24] = A_i[24];
	assign B_o[34:25] = A_i[34:25];
	assign B_o[35] = A_i[35];
	assign A_i[45:36] = B_o[45:36];
	assign B_o[55:46] = A_i[55:46];
	assign B_o[65:56] = A_i[65:56];
	assign B_o[66] = A_i[66];
	assign B_o[67] = A_i[67];
	assign B_o[68] = A_i[68];
	assign A_i[69] = B_o[69];
	assign A_i[70] = B_o[70];
	assign A_i[71] = B_o[71];
	assign A_i[72] = B_o[72];
endmodule

// BEGIN irs irs_infra DATE Mon Aug 20, 2012 22:27:39
// 
// wire [11:0] dat_o;
// wire [5:0] smp_i;
// wire [2:0] ch_i;
// wire smpall_i;
// wire ramp_i;
// wire start_i;
// wire clr_i;
// wire [9:0] wr_i;
// wire wrstrb_i;
// wire [9:0] rd_o;
// wire [9:0] rdo_i;
// wire [9:0] rdoe_i;
// wire rden_i;
// wire tsa_i;
// wire tsa_close_i;
// wire tsaout_o;
// wire tstout_o;
// wire power_o;
// wire drive_o;
// irs_infra irsif(.interface_io(interface_io),
//                 .dat_i(dat_o),
//                 .smp_o(smp_i),
//                 .ch_o(ch_i),
//                 .smpall_o(smpall_i),
//                 .ramp_o(ramp_i),
//                 .start_o(start_i),
//                 .clr_o(clr_i),
//                 .wr_o(wr_i),
//                 .wrstrb_o(wrstrb_i),
//                 .rd_i(rd_o),
//                 .rdo_o(rdo_i),
//                 .rdoe_o(rdoe_i),
//                 .rden_o(rden_i),
//                 .tsa_o(tsa_i),
//                 .tsa_close_o(tsa_close_i),
//                 .tsaout_i(tsaout_o),
//                 .tstout_i(tstout_o),
//                 .power_i(power_o),
//                 .drive_i(drive_o));
//
// END irs irs_infra DATE Mon Aug 20, 2012 22:27:39

module irs_infra(
		inout [`IRSIF_SIZE-1:0] interface_io,
		input  [11:0]  dat_i,
		output  [5:0]  smp_o,
		output  [2:0]  ch_o,
		output  smpall_o,
		output  ramp_o,
		output  start_o,
		output  clr_o,
		output  [9:0]  wr_o,
		output  wrstrb_o,
		input  [9:0]  rd_i,
		output  [9:0]  rdo_o,
		output  [9:0]  rdoe_o,
		output  rden_o,
		output  tsa_o,
		output  tsa_close_o,
		input  tsaout_i,
		input  tstout_i,
		input  power_i,
		input  drive_i
		);

	assign interface_io[11:0] = dat_i;
	assign smp_o = interface_io[17:12];
	assign ch_o = interface_io[20:18];
	assign smpall_o = interface_io[21];
	assign ramp_o = interface_io[22];
	assign start_o = interface_io[23];
	assign clr_o = interface_io[24];
	assign wr_o = interface_io[34:25];
	assign wrstrb_o = interface_io[35];
	assign interface_io[45:36] = rd_i;
	assign rdo_o = interface_io[55:46];
	assign rdoe_o = interface_io[65:56];
	assign rden_o = interface_io[66];
	assign tsa_o = interface_io[67];
	assign tsa_close_o = interface_io[68];
	assign interface_io[69] = tsaout_i;
	assign interface_io[70] = tstout_i;
	assign interface_io[71] = power_i;
	assign interface_io[72] = drive_i;

endmodule


//% Reassigns a irs interface from a irs_infra on A_i
module irs_infra_reassign( A_i, B_o );
	inout [`IRSIF_SIZE-1:0] A_i;
	inout [`IRSIF_SIZE-1:0] B_o;

	assign B_o[11:0] = A_i[11:0];
	assign A_i[17:12] = B_o[17:12];
	assign A_i[20:18] = B_o[20:18];
	assign A_i[21] = B_o[21];
	assign A_i[22] = B_o[22];
	assign A_i[23] = B_o[23];
	assign A_i[24] = B_o[24];
	assign A_i[34:25] = B_o[34:25];
	assign A_i[35] = B_o[35];
	assign B_o[45:36] = A_i[45:36];
	assign A_i[55:46] = B_o[55:46];
	assign A_i[65:56] = B_o[65:56];
	assign A_i[66] = B_o[66];
	assign A_i[67] = B_o[67];
	assign A_i[68] = B_o[68];
	assign B_o[69] = A_i[69];
	assign B_o[70] = A_i[70];
	assign B_o[71] = A_i[71];
	assign B_o[72] = A_i[72];
endmodule

// BEGIN irs irs_debug DATE Mon Aug 20, 2012 22:27:39
// 
// wire [11:0] dat_i;
// wire [5:0] smp_i;
// wire [2:0] ch_i;
// wire smpall_i;
// wire ramp_i;
// wire start_i;
// wire clr_i;
// wire [9:0] wr_i;
// wire wrstrb_i;
// wire [9:0] rd_i;
// wire [9:0] rdo_i;
// wire [9:0] rdoe_i;
// wire rden_i;
// wire tsa_i;
// wire tsa_close_i;
// wire tsaout_i;
// wire tstout_i;
// wire power_i;
// wire drive_i;
// irs_debug irsif(.interface_io(interface_io),
//                 .dat_o(dat_i),
//                 .smp_o(smp_i),
//                 .ch_o(ch_i),
//                 .smpall_o(smpall_i),
//                 .ramp_o(ramp_i),
//                 .start_o(start_i),
//                 .clr_o(clr_i),
//                 .wr_o(wr_i),
//                 .wrstrb_o(wrstrb_i),
//                 .rd_o(rd_i),
//                 .rdo_o(rdo_i),
//                 .rdoe_o(rdoe_i),
//                 .rden_o(rden_i),
//                 .tsa_o(tsa_i),
//                 .tsa_close_o(tsa_close_i),
//                 .tsaout_o(tsaout_i),
//                 .tstout_o(tstout_i),
//                 .power_o(power_i),
//                 .drive_o(drive_i));
//
// END irs irs_debug DATE Mon Aug 20, 2012 22:27:39

module irs_debug(
		inout [`IRSIF_SIZE-1:0] interface_io,
		output  [11:0]  dat_o,
		output  [5:0]  smp_o,
		output  [2:0]  ch_o,
		output  smpall_o,
		output  ramp_o,
		output  start_o,
		output  clr_o,
		output  [9:0]  wr_o,
		output  wrstrb_o,
		output  [9:0]  rd_o,
		output  [9:0]  rdo_o,
		output  [9:0]  rdoe_o,
		output  rden_o,
		output  tsa_o,
		output  tsa_close_o,
		output  tsaout_o,
		output  tstout_o,
		output  power_o,
		output  drive_o
		);

	assign dat_o = interface_io[11:0];
	assign smp_o = interface_io[17:12];
	assign ch_o = interface_io[20:18];
	assign smpall_o = interface_io[21];
	assign ramp_o = interface_io[22];
	assign start_o = interface_io[23];
	assign clr_o = interface_io[24];
	assign wr_o = interface_io[34:25];
	assign wrstrb_o = interface_io[35];
	assign rd_o = interface_io[45:36];
	assign rdo_o = interface_io[55:46];
	assign rdoe_o = interface_io[65:56];
	assign rden_o = interface_io[66];
	assign tsa_o = interface_io[67];
	assign tsa_close_o = interface_io[68];
	assign tsaout_o = interface_io[69];
	assign tstout_o = interface_io[70];
	assign power_o = interface_io[71];
	assign drive_o = interface_io[72];

endmodule


